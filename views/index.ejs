<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Multiplayer Chess Game</title>
    <link rel="manifest" href="/manifest.json" />
    <meta name="theme-color" content="#673AB7" />
    <script src="https://cdn.tailwindcss.com"></script>

    <style>
        @import url('https://fonts.googleapis.com/css2?family=Noto+Sans+Symbols+2&display=swap');

        body {
            background: linear-gradient(135deg, #4CAF50, #673AB7);
            color: #ffffff;
        }

        .chessboard {
            display: grid;
            grid-template-columns: repeat(8, 1fr);
            grid-template-rows: repeat(8, 1fr);
            border: 8px solid rgba(255, 255, 255, 0.2);
            border-radius: 12px;
            aspect-ratio: 1 / 1;
            background-color: rgba(255, 255, 255, 0.1);
            font-family: "Noto Sans Symbols 2", sans-serif;
            width: 90vw;
            max-width: 700px;
            backdrop-filter: blur(10px);
            box-shadow: 0 0 20px rgba(0, 0, 0, 0.3);
        }

        .square {
            display: flex;
            align-items: center;
            justify-content: center;
            transition: background-color 0.3s ease;
        }

        .square.white {
            background-color: rgba(76, 175, 80, 0.3); 
        }
        .square.black {
            background-color: rgba(103, 58, 183, 0.3); 
        }

        .piece {
            font-size: min(6vw, 50px);
            cursor: grab;
            user-select: none;
            transition: transform 0.2s ease;
        }
        .piece.white {
            color: #ffffff;
            filter: drop-shadow(0px 0px 8px rgba(255, 255, 255, 0.8));
        }
        .piece.black {
            color: #673AB7;
            filter: drop-shadow(0px 0px 8px rgba(103, 58, 183, 0.8));
        }

        .piece:hover {
            transform: scale(1.1);
        }

        .flipped {
            transform: rotate(180deg);
        }

        .flipped .piece {
            transform: rotate(180deg);
        }

        .highlight {
            background-color: rgba(255, 255, 255, 0.3);
            box-shadow: inset 0 0 8px rgba(255, 255, 255, 0.7);
        }

        #captured-white, #captured-black {
            padding: 10px;
            border-radius: 8px;
            background-color: rgba(255, 255, 255, 0.1);
            backdrop-filter: blur(5px);
        }
        #gameLink {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #ffffff;
            backdrop-filter: blur(5px);
        }

        #copyGameLink, #shareGame, #installButton {
            background-color: rgba(255, 255, 255, 0.1);
            border: 1px solid rgba(255, 255, 255, 0.2);
            color: #ffffff;
            transition: background-color 0.3s ease;
            backdrop-filter: blur(5px);
        }

        #copyGameLink:hover, #shareGame:hover, #installButton:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }

        #installButton {
            display: none;
            margin-top: 10px;
        }
    </style>
</head>

<body class="flex flex-col items-center justify-center min-h-screen p-4">

    <h1 class="text-3xl font-bold mb-4 text-center text-white">Multiplayer Chess</h1>

    <div class="flex flex-col items-center justify-center gap-2 mb-4 w-full max-w-[700px]">
        <div class="flex flex-col sm:flex-row items-center justify-center gap-2 w-full">
            <input type="text" id="gameLink" class="border px-3 py-2 rounded w-full sm:w-64 text-center" readonly>
            <button id="copyGameLink" class="px-4 py-2 rounded w-full sm:w-auto">
                Copy
            </button>
            <button id="shareGame" class="px-4 py-2 rounded w-full sm:w-auto">
                Share on WhatsApp
            </button>
        </div>
        <button id="installButton" class="px-4 py-2 rounded w-full sm:w-auto">
            Install Now
        </button>
        <p class="text-sm text-gray-300 text-center">Share this link to invite a friend!</p>
    </div>

    <div class="flex justify-between w-full max-w-[700px] mb-4">
        <div id="captured-black" class="text-xl flex gap-1 text-black"></div>
        <div id="captured-white" class="text-xl flex gap-1 text-white"></div>
    </div>

    <div class="chessboard"></div>

    <script src="https://cdn.socket.io/4.8.1/socket.io.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/chess.js/0.10.3/chess.min.js"></script>
    <script src="/js/chessgame.js"></script>

    <script>
        const gameLink = window.location.origin + "/create-game";
        document.getElementById("gameLink").value = gameLink;

        document.getElementById("shareGame").addEventListener("click", function () {
            const message = `Join me for a game of chess! Click here: ${gameLink}`;
            window.open(`https://wa.me/?text=${encodeURIComponent(message)}`, "_blank");
        });

        document.getElementById("copyGameLink").addEventListener("click", function () {
            const input = document.getElementById("gameLink");
            input.select();
            input.setSelectionRange(0, 99999);
            navigator.clipboard.writeText(input.value);
            alert("Game link copied!");
        });

        // Register the service worker
        if ("serviceWorker" in navigator) {
            window.addEventListener("load", () => {
                navigator.serviceWorker.register("/service-worker.js")
                    .then((registration) => {
                        console.log("Service Worker registered: ", registration);
                    })
                    .catch((error) => {
                        console.log("Service Worker registration failed: ", error);
                    });
            });
        }

        // Install Now button logic
        let deferredPrompt;
        const installButton = document.getElementById("installButton");

        window.addEventListener("beforeinstallprompt", (event) => {
            // Prevent the default prompt
            event.preventDefault();
            // Save the event for later use
            deferredPrompt = event;
            // Show the install button
            installButton.style.display = "block";
        });

        installButton.addEventListener("click", () => {
            if (deferredPrompt) {
                // Show the install prompt
                deferredPrompt.prompt();
                // Wait for the user to respond
                deferredPrompt.userChoice.then((choiceResult) => {
                    if (choiceResult.outcome === "accepted") {
                        console.log("User accepted the install prompt");
                    } else {
                        console.log("User dismissed the install prompt");
                    }
                    // Reset the deferred prompt
                    deferredPrompt = null;
                    // Hide the install button
                    installButton.style.display = "none";
                });
            }
        });
    </script>

</body>

</html>